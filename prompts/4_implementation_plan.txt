Создай implementation_plan.mdc  
(alwaysApply: false).

Требования:
* 3–4 этапа (Milestone 1, 2, 3 …).
* Внутри каждого — список задач в формате  
  - TODO: …  
  - TODO: …  
* Внизу файла добавь раздел Acceptance Checklist (список критериев готовности).
* В самом конце вставь инструкцию, чтобы Cursor сам отмечал выполненное:  

> **@Cursor**: После завершения задачи поменяй её статус на DONE и добавь краткий маркер «// done by Cursor» с описанием, что именно сделано.

Ответ — полный .mdc-файл. Он должен быть очень подробный, начинающийся с собственно создания структуры приложения. Вначале нужно указать, что у каждого пункта есть статус, и нужно начинать работу с первого невыполненного.

Заметки
Часто возникающие проблемы, которые нужно учесть при разработке:
• ВАЖНО: Создать .gitignore ПЕРЕД первым коммитом, включив .env файлы
• Добавить python-dotenv в зависимости для загрузки локальных переменных окружения

• Создать Dockerfile на базе python:3.12-slim
  ВАЖНО: Порядок операций критичен для editable install:
  1. COPY pyproject.toml ./
  2. COPY src/ ./src/  # ОБЯЗАТЕЛЬНО перед pip install -e .
  3. RUN pip install --no-cache-dir -e .
• Создать .dockerignore для оптимизации контекста сборки

• ВНИМАНИЕ: Исправить запуск asyncio для контейнерной среды
  - НЕ использовать asyncio.run() в main
  - Вызывать application.run_webhook/run_polling напрямую
  - python-telegram-bot управляет event loop самостоятельно